<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gururuby.ru]]></title>
  <link href="http://gururuby.ru/atom.xml" rel="self"/>
  <link href="http://gururuby.ru/"/>
  <updated>2015-12-16T22:53:57+03:00</updated>
  <id>http://gururuby.ru/</id>
  <author>
    <name><![CDATA[Gururuby.ru]]></name>
    <email><![CDATA[i@gururuby.ru]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Что нового в Ruby 2.3?]]></title>
    <link href="http://gururuby.ru/blog/2015/12/16/whats_new_in_ruby_2_3/"/>
    <updated>2015-12-16T19:48:43+03:00</updated>
    <id>http://gururuby.ru/blog/2015/12/16/whats_new_in_ruby_2_3</id>
    <content type="html"><![CDATA[<p>Совсем скоро выйдет релиз Ruby 2.3.0, а пока доступен пререлиз под номером 1. Давайте посмотрим что новенького появилось.</p>

<!-- more -->


<p>Ставим ruby 2.3.0-preview1 через <a href="https://rvm.io/rvm/install/">rvm</a>, либо <a href="https://github.com/rbenv/rbenv#installation">rbenv</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># RVM</span>
</span><span class='line'>rvm install 2.3.0-preview1
</span><span class='line'>
</span><span class='line'><span class="c"># Rbenv</span>
</span><span class='line'>brew upgrade ruby-build --HEAD
</span><span class='line'>rbenv install 2.3.0-preview1
</span></code></pre></td></tr></table></div></figure>


<h3>~ Safe navigation operator ~</h3>

<p>Появился новый оператор - <code>&amp;.</code>. В Ruby on Rails есть замечательный метод <a href="http://apidock.com/rails/Object/try">try!</a>, так вот этот оператор
имеет схожую функциональность. Он выполняет проверку на nil до вызова метода у обьекта и возвращает его в случае если
сам nil, в противном случае вызывается метод после оператора.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby &lt;= 2.2</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;User Admin&quot;</span> <span class="k">if</span> <span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">admin?</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ruby 2.3</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;User Admin&quot;</span> <span class="k">if</span> <span class="n">user</span><span class="o">&amp;.</span><span class="n">admin?</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Important</span>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="n">user</span><span class="o">&amp;.</span><span class="n">admin?</span> <span class="c1"># raise NoMethodError</span>
</span></code></pre></td></tr></table></div></figure>


<p>Но будьте внимательны, если <code>user</code> у вас будет например <code>false</code>, то вы получите <code>NoMethodError</code></p>

<h3>~ Frozen string literals ~</h3>

<p>До Ruby 2.2 строки были изменяемые, т.е мы могли взять и сделать что-то подобное <code>str[1] = 'a'</code>. Если нам было необходимо
запретить изменение строки, то с помощью метода <code>#freeze</code> это прекрасно получалось</p>

<p>Планируется использование <a href="https://bugs.ruby-lang.org/issues/11473">неизменных строк по умолчанию в Ruby 3.0</a>, разработчики хотят увеличить производительность языка,
уменьшив количество обьектов в памяти. В версии 2.3 можно включить этот режим, для этого в начало
файла нужно поместить комментарий <code># frozen_string_literal: true</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># frozen_string_literal: true</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;cat&#39;</span>
</span><span class='line'><span class="n">str</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;b&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># frozen.rb:5:in `[]=&#39;: can&#39;t modify frozen String (RuntimeError)</span>
</span><span class='line'><span class="c1">#   from frozen.rb:5:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>~ Array#dig и Hash#dig ~</h3>

<p>Небольшие дополнения к стандартным библиотекам, которые позволяют выполнять такие вещи:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span> <span class="o">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>    <span class="c1">#=&gt; 9</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">#=&gt; 17</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>    <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>    <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dict</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">a</span><span class="p">:</span> <span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">29</span> <span class="p">},</span>
</span><span class='line'>  <span class="ss">b</span><span class="p">:</span> <span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">37</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dict</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:x</span><span class="p">)</span> <span class="c1">#=&gt; 23</span>
</span><span class='line'><span class="n">dict</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="ss">:b</span><span class="p">,</span> <span class="ss">:z</span><span class="p">)</span> <span class="c1">#=&gt; 37</span>
</span><span class='line'><span class="n">dict</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="ss">:b</span><span class="p">,</span> <span class="ss">:y</span><span class="p">)</span> <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">dict</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="ss">:c</span><span class="p">,</span> <span class="ss">:x</span><span class="p">)</span> <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<h3>~ Did you mean? ~</h3>

<p>Появилась удобная вещь, в виде подсказки, которая предлагает вам варианты правильного вызова метода, если вы вдруг опечатались</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">preview1</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="s2">&quot;string&quot;</span><span class="o">.</span><span class="n">downcaze</span>
</span><span class='line'>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`downcaze&#39; for &quot;string&quot;:String</span>
</span><span class='line'><span class="sb">Did you mean?  downcase</span>
</span><span class='line'><span class="sb">               downcase!</span>
</span></code></pre></td></tr></table></div></figure>


<h3>~ Сравнение Hash ~</h3>

<p>Теперь можно сравнивать hash. Вот таким образом</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="o">&gt;=</span> <span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="o">&gt;=</span> <span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="o">&gt;=</span> <span class="p">{</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Также можно применять и другие операторы сравнения, более подробно <a href="http://olivierlacan.com/posts/hash-comparison-in-ruby-2-3/">здесь</a></p>

<h3>~ Hash#to_proc ~</h3>

<p>Hash можно преобразовать в proc обьект, причем вызвав у proc ключ из Hash вы получите значение</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">bar</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">baz</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">to_proc</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span>  <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="ss">:bar</span><span class="p">)</span>  <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="ss">:quux</span><span class="p">)</span> <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Иногда приходится для получения определенных значений из Hash использовать сложную конструкцию, с использованием <code>&amp;</code>
это немного упрощается</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">bar</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">baz</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># bad:</span>
</span><span class='line'><span class="o">[</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="p">}</span> <span class="c1">#=&gt; [1, 2]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good:</span>
</span><span class='line'><span class="o">[</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="p">)</span> <span class="c1">#=&gt; [1, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>~ Hash#fetch_values ~</h3>

<p>Новый метод похож по своей функциональности на <code>Hash#values_at</code>. Он позволяет получить значения по списку ключей.
Отличие <code>fetch_values</code> в том, что если ключа не найдется, то будет брошен exception <code>KeyError</code>, вместо возвращения <code>nil</code>, как это
реализовано в <code>values_at</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">bar</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">baz</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch_values</span><span class="p">(</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="p">)</span> <span class="c1">#=&gt; [1, 2]</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:quux</span><span class="p">)</span>    <span class="c1">#=&gt; [1, nil]</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch_values</span><span class="p">(</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:quux</span><span class="p">)</span> <span class="c1">#=&gt; raise KeyError</span>
</span></code></pre></td></tr></table></div></figure>


<h3>~ Enumerable#grep_v ~</h3>

<p>Если вы знакомы с утилитой grep в linux системах, то в случае если мы применим опцию <code>-v</code> в вызове этой консольной утилиты,
то в результате выполнения этой команды <code>print "test" | grep t test -v</code> мы ничего не получим на выходе. Эта опция позволяет вывести то что не подошло,
т.е. она противоположна <code>grep</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="sx">%w(foo bar baz)</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">grep_v</span><span class="p">(</span><span class="sr">/ba/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;foo&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/ba/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;bar&#39;, &#39;baz&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>~ Numeric#positive? и #negative? ~</h3>

<p>Добавилось несколько методов из Rails. Названия интуитивно понятны, можно обойтись без примеров</p>

<h2>Ссылки</h2>

<p><a href="https://www.ruby-lang.org/en/news/2015/11/11/ruby-2-3-0-preview1-released/">https://www.ruby-lang.org/en/news/2015/11/11/ruby-2-3-0-preview1-released/</a></p>
]]></content>
  </entry>
  
</feed>
