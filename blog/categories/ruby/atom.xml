<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Gururuby.ru | Блог Ruby-разработчика]]></title>
  <link href="http://gururuby.ru/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://gururuby.ru/"/>
  <updated>2016-12-25T10:53:44+03:00</updated>
  <id>http://gururuby.ru/</id>
  <author>
    <name><![CDATA[Gururuby.ru]]></name>
    <email><![CDATA[i@gururuby.ru]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Что нового в Ruby 2.4?]]></title>
    <link href="http://gururuby.ru/blog/2016/12/15/whats-new-in-ruby-2-4/"/>
    <updated>2016-12-15T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/12/15/whats-new-in-ruby-2-4</id>
    <content type="html"><![CDATA[<p><img src="/images/15-12-2016.jpg">
Скоро выйдет стабильный релиз Ruby 2.4. Ознакомимся что же нас ждет нового.</p>

<!-- more -->


<h2>Float#round</h2>

<p>Изменилось поведение метода <code>round</code>. Разработчики добавили возможность указать в какую сторону необходимо округлять, передав в этот
метод дополнительный параметр <code>:half</code>, который может принимать значения: <code>:even, :up, :down</code>.
Для примера:</p>

<pre><code class="ruby">(3.5).round(half: :up)
=&gt; 4
</code></pre>

<p>Эти изменения касаются также таких методов как: <code>floor, ceil, truncate</code>. В них можно передать эту опцию.</p>

<h2>IO#gets</h2>

<p>Напомню что метод gets используется для получения пользовательского ввода в вашем скрипте. Вы наверняка использовали его
в задачках по Ruby. Так вот, если пользователь вводил какие либо данные, к вам в результате приходила строка с переносом <code>\n</code>
Чтобы его убрать использовался метод chomp. Теперь мы можем указать опцию <code>chomp</code> в методе gets</p>

<pre><code class="ruby"># 2.3
input_string = gets
=&gt; 'tratata\n'
# 2.4
input_string = gets(chomp: true)
=&gt; 'tratata'
</code></pre>

<h2>Dir, File, Pathname #empty?</h2>

<p>Поздравляю теперь мы можем передать путь в метод <code>empty?</code> и выяснить содержит ли папка/файл/путь что-то внутри
Метод <code>File.empty?</code> эквивалентен методу <code>File.zero?</code>, который уже давно был в библиотеке для работы с файлами.</p>

<h2>Hash#transform_values</h2>

<p>Как по мне довольно удобный метод добавили в класс Hash. Теперь мы можем изменять значения hash в итераторе.
Например вот так:</p>

<pre><code class="ruby"># 2.4
data = {x: 1, y: 2, z: 3}
data.transform_values{|value| value * 2 }
=&gt; {x: 2, y: 4, z: 6}
</code></pre>

<h2>Kernel#clone</h2>

<p>При использовании <code>clone</code> или <code>dup</code>, можно теперь передать дополнительный аргумент, в котором указать будет ли объект
<code>freeze</code>(недоступным для изменения).</p>

<pre><code class="ruby"># 2.4
frozen_string = "frozen".freeze
dup = frozen_string.clone(freeze: false)

dup.frozen?
=&gt; false
</code></pre>

<h2>Binding#irb</h2>

<p>Есть такой замечательный gem <code>pry</code>. Достаточно в любом месте кода поместить <code>binding.pry</code> и у вас появляется возможность
использовать консоль pry для дебага вашего приложения. В Ruby 2.4 добавлена похожая фича, только нужно указать <code>binding.irb</code>.</p>

<h2>Regexp#match?</h2>

<p>Для регулярок добавили новый метод <code>match?</code> который работает аж в 3 раза быстрее чем методы <code>match, ===, =~</code>.
При использовании медленных методов, руби создавал объект класса <code>MatchData</code>,
а в новом методе он не создается, за счет этого повышенная скорость работы.</p>

<pre><code class="ruby">/^foo (\w+)$/ =~ 'foo bar'      # =&gt; 0
                                # =&gt; #&lt;MatchData "foo bar" 1:"bar"&gt;

/^foo (\w+)$/.match('foo baz')  # =&gt; #&lt;MatchData "foo baz" 1:"baz"&gt;
                                # =&gt; #&lt;MatchData "foo baz" 1:"baz"&gt;

/^foo (\w+)$/ === 'foo qux'     # =&gt; true
                                # =&gt; #&lt;MatchData "foo qux" 1:"qux"&gt;
</code></pre>

<pre><code class="ruby"># 2.4
/^foo (\w+)$/.match?('foo wow') # =&gt; true
                                # =&gt; nil
</code></pre>

<h2>Regexp#named_captures</h2>

<p>Довольно забавная фича. Позволяет сделать именованные группы в регулярном выражении,
и в последствии преобразовать это все в hash с результатами. Лучше один раз увидеть.</p>

<pre><code class="ruby"># 2.4
pattern = /(?&lt;name1&gt;\w+) (?&lt;name2&gt;\w+)/
pattern.match('Herr Kresken').named_captures # =&gt; { "name1" =&gt; "Herr", "name2" =&gt; "Kresken" }
</code></pre>

<p>Также для похожих целей можно использовать метод <code>values_at</code>, который также теперь можно применять к отматченному результату</p>

<pre><code class="ruby"># 2.4
pattern = /(?&lt;year&gt;\d{4})-(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})/
pattern.match('2016-02-01').values_at(:year, :month) # =&gt; ["2016", "02"]
</code></pre>

<p>Кроме именованных ключей, вы можете передать индексы групп, например 1, 3</p>

<pre><code class="ruby"># 2.4
pattern = /(\d{4})-(\d{2})-(\d{2})$/
pattern.match('2016-07-18').values_at(1, 3) # =&gt; ["2016", "18"]
</code></pre>

<h2>Integer#digits</h2>

<p>Как получить массив чисел составляющих число? Раньше это можно было сделать так
Преобразовать число в строку, вызвать метод <code>chars</code>, через map сделать <code>to_i</code></p>

<pre><code class="ruby">123.to_s.chars.map(&amp;:to_i).reverse # =&gt; [3, 2, 1]
</code></pre>

<p>Теперь стало проще:</p>

<pre><code class="ruby"># 2.4
123.digits                  # =&gt; [3, 2, 1]
</code></pre>

<h2>Array#min, max</h2>

<p>Array класс обзавелся своими методами <code>min, max</code>, который работают практически в 2 раза быстрее чем соответствующие методы
Enumerable</p>

<h2>Обьединение Bignum Fixnum в Integer</h2>

<p>Довольно серьезное изменение структуры языка. В Ruby 2.4 убрали классы Fixnum и Bignum и объединили их в один Integer</p>

<pre><code class="ruby"># 2.3:
numerics # =&gt; [Complex, Rational, Bignum, Float, Fixnum, Integer, BigDecimal]

# 2.4:
numerics # =&gt; [Complex, Rational, Float, Integer, BigDecimal]
</code></pre>

<h2>Использование в условиях мультиприсвоения</h2>

<p>Теперь в условиях можно использовать множественное присвоение</p>

<pre><code class="ruby"># 2.4
branch1 =
  if (foo, bar = %w[foo bar])
    'true'
  else
    'false'
  end

branch2 =
  if (foo, bar = nil)
    'true'
  else
    'false'
  end

branch1 # =&gt; "true"
branch2 # =&gt; "false"
</code></pre>

<h2>Заключение</h2>

<p>Неплохие добавочки в язык, точно знаю что использовал бы <code>transform_values</code>, недавно был случай когда нужно было проверить
папку на наличие в ней файлов, здесь бы пригодился метод <code>empty?</code>. Вижу применение для <code>named_captures</code>. Остальное также может
пригодиться, но лично для меня реже. Помимо добавления функционала были улучшения производительности. Но это уже совсем другая
история. На этом все. Подписывайтесь на <a href="https://www.youtube.com/c/gururubyru">канал</a>, скоро выйдет новая порция уроков. Добавляйте в закладки</p>

<h2>Ссылки к статье</h2>

<ul>
<li><a href="https://www.ruby-lang.org/en/news/2016/09/08/ruby-2-4-0-preview2-released/">Релиз Ruby 2.4</a></li>
<li><a href="https://github.com/pry/pry">Gem <code>pry</code></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[В чем разница между Load и Require, Include и Extend]]></title>
    <link href="http://gururuby.ru/blog/2016/04/14/load-require-include-extend/"/>
    <updated>2016-04-14T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/04/14/load-require-include-extend</id>
    <content type="html"><![CDATA[<p><img src="/images/14-04-2016.png">
При написании сложных программ на Ruby появляется необходимость каким-то образом компоновать файлы, раскидывать код для улучшения читабельности,
а также для повторного использования. В Ruby есть несколько методов, которые позволяют осуществить это как на уровне файлов так и на уровне кода.</p>

<!-- more -->


<p>Для организации файлов служат методы - <code>load</code> и <code>require</code>, а для организации кода - <code>include</code> и <code>extend</code></p>

<h3><code>load</code> или <code>require</code></h3>

<p><code>load</code> метод, позволяет включить файл в другой файл, при этом загрузка этого файла,
будет происходить каждый раз в момент вызова кода где указано подключение. Это полезно для разработки, когда вам нужно видеть результат изменений вживую.</p>

<p>Для примера код ниже. Есть какой-то модуль, в отдельном файле, и мы хотим его подключить в другой файл.</p>

<pre><code class="ruby test_module.rb">module TestModule
  def some_method
    # ...
  end
end
</code></pre>

<pre><code class="ruby test_class.rb">load 'test_module.rb'
class TestClass
  def some_method
    # ...
  end
end
</code></pre>

<p>Метод <code>require</code> работает по-другому. При его использовании, подключаемый файл, загружается единоразово в память, и используется в дальнейшем из памяти.
Очевидно что при использовании такого способа подключения, программа будет работать быстрее. Но при разработке, вам придется постоянно перезапукать программу, чтобы
видеть изменения.</p>

<p>Используется он также как и <code>load</code>, <code>require 'test_module'</code>. При этом мы можем не указывать расширение <code>.rb</code>. Этот метод прекрасно сработает и без него.</p>

<h3><code>include</code> или <code>extend</code></h3>

<p>При организации кода внутри программы, нужно использовать методы - <code>include</code> или <code>extend</code>
Если вы видите повторяющийся код в вашей программе, его можно вынести в отдельный модуль, и подключать его внутрь с использованием <code>include</code>.
Например вот так:</p>

<pre><code class="ruby">module TestModule
  def some_method
    "Some method of #{self.class}"
  end
end

class TestClass
  include TestModule
  # ...
end

puts TestClass.new.some_method
=&gt; 'Some method of TestClass'
</code></pre>

<p>C помощью <code>include</code> методы модуля становятся доступными для выполнения в классе <code>TestClass</code>. Т.е. таким образом мы можем избавиться от дублирования кода,
перенся его в модуль и подключив там где нам это необходимо. Мы расширили класс, внедрив в него новые методы объекта.</p>

<p>При использовании <code>extend</code>, мы можем также внедрить новые методы, но это уже будут методы класса, а не объекта.</p>

<pre><code class="ruby">module TestModule
  def some_method
    "Some method of #{self.class}"
  end
end

class TestClass
  extend TestModule
  # ...
end

puts TestClass.some_method
=&gt; 'Some method of Class'
</code></pre>

<p>Поэтому используйте <code>extend</code> если хотите расширить функционал класса и <code>include</code> для добавления функционала к объекту класса.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Божественный Ruby. Проповедь 2]]></title>
    <link href="http://gururuby.ru/blog/2016/02/25/lesson-2-setup-environment/"/>
    <updated>2016-02-25T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/02/25/lesson-2-setup-environment</id>
    <content type="html"><![CDATA[<p>В этом уроке, о том какое окружение выбрать, какую операционную систему использовать и почему, а также установим Ubuntu 14.04
с помощью VirtualBox</p>

<iframe width="770" height="500" src="https://www.youtube.com/embed/C03WnMS5YcM" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Божественный Ruby. Проповедь 1]]></title>
    <link href="http://gururuby.ru/blog/2016/02/24/lesson-1-oop-and-ruby/"/>
    <updated>2016-02-24T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/02/24/lesson-1-oop-and-ruby</id>
    <content type="html"><![CDATA[<p>Серия видеоуроков по Ruby, решил начать с объяснения своими словами ООП, в конце немного о Ruby.</p>

<iframe width="770" height="500" src="https://www.youtube.com/embed/mICGqoexnls" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[С наступающим Новым 2016 годом!]]></title>
    <link href="http://gururuby.ru/blog/2015/12/30/happy_new_year_2016/"/>
    <updated>2015-12-30T00:00:00+03:00</updated>
    <id>http://gururuby.ru/blog/2015/12/30/happy_new_year_2016</id>
    <content type="html"><![CDATA[<p><img src="/images/happy_new_year.jpg">
Поздравляю всех с наступающим 2016 годом! Добавим снежка, хотя бы виртуального )
<code>ruby
ruby -e 'def a;10.times{puts " "*rand(79)+"*"};end;99.times{a;puts " "*34+"Happy New Year 2016";a;sleep 0.1;puts "\e[2J"}'
</code></p>
]]></content>
  </entry>
  
</feed>
