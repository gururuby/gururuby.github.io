<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Gururuby.ru | Блог Ruby-разработчика]]></title>
  <link href="http://gururuby.ru/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://gururuby.ru/"/>
  <updated>2016-03-05T01:21:37+03:00</updated>
  <id>http://gururuby.ru/</id>
  <author>
    <name><![CDATA[Gururuby.ru]]></name>
    <email><![CDATA[i@gururuby.ru]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Кэшируем статику с `http_cache_forever` в Rails 5]]></title>
    <link href="http://gururuby.ru/blog/2016/03/04/rails5-http-cache-forever/"/>
    <updated>2016-03-04T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/03/04/rails5-http-cache-forever</id>
    <content type="html"><![CDATA[<p>Продолжаем знакомиться с нововведениями в Rails 5. Часто в проектах бывают статические странички, которые редко меняются, и нам не хотелось бы рендерить их каждый раз заново.
В Rails 5 есть метод <code>http_cache_forever</code> который используется в контроллере, и позволяет закэшировать страницу.</p>

<!-- more -->


<p>Рассмотрим пример:</p>

<p>```ruby</p>

<h1>app/controllers/pages_controller.rb</h1>

<p>class PagesController &lt; ApplicationController
  def about
  end
end</p>

<h1>app/views/pages/about.html.erb</h1>

<h1>О нас</h1>


<p>```</p>

<p>Есть контроллер <code>Pages</code>, в нем action <code>about</code>, который рендерит страницу &lsquo;О нас&rsquo; нашего сайта.
Посмотрим на логи нашего приложения:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Processing by PagesController#about as HTML
</span><span class='line'>  Rendered pages/about.html.erb within layouts/application (1.3ms)
</span><span class='line'>Completed 200 OK in 224ms (Views: 212.4ms | ActiveRecord: 0.0ms)</span></code></pre></td></tr></table></div></figure></p>

<p>Видно что рендеринг страницы занимает <code>212.4ms</code>. Это довольно много, видимо на странице много контента.
Попробуем использовать <code>http_cache_forever</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;app/</span><span class="n">controllers</span><span class="o">/</span><span class="n">pages_controller</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class PagesController &amp;lt; ApplicationController</span>
</span><span class='line'><span class="sr">  def about</span>
</span><span class='line'><span class="sr">    http_cache_forever(public: true, version: &amp;lsquo;v1&amp;rsquo;) {}</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Этот метод в качестве первого аргумента принимает список опций, а вторым блок, который может быть записан также с помощью <code>do end</code>
Используя этот метод, мы устанавливаем заголовки ответа, которые указывают браузеру, что ответ не изменился и можно использовать закэшированную версию страницы.
И в логах теперь будет следующее:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Первый запрос&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Processing by PagesController#about as HTML
</span><span class='line'>  Rendered pages/about.html.erb within layouts/application (1.3ms)
</span><span class='line'>Completed 200 OK in 224ms (Views: 212.4ms | ActiveRecord: 0.0ms)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Последующий запрос&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Processing by PagesController#about as HTML
</span><span class='line'>Completed 304 Not Modified in 2ms (ActiveRecord: 0.0ms)</span></code></pre></td></tr></table></div></figure></p>

<p>Происходит первый запрос, во втором браузеру отправляется заголовок ответа “304 Not Modified”, и мы видим кэшированную страницу</p>

<h3>Подробнее о http_cache_forever</h3>

<p>Рассмотрим опции которые передаются в этот метод. Если мы не укажем <code>public: true</code>, то кэширование будет работать только для браузера,
в противном случае, кэширование включится также и для проксированных запросов.</p>

<p>Используйте опцию <code>version</code>, когда вы изменили страничку, и хотите инвалидировать кэш. Указав версию отличную от предыдущей, вы заставите браузер обновить пересоздать кэш страницы. Например <code>version: 'v2'</code>
Посмотреть на реализацию, можно заглянув на гитхаб, в <a href="https://github.com/rails/rails/pull/18394/files">этот коммит</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Использование `redirect_to :back` в Rails 5]]></title>
    <link href="http://gururuby.ru/blog/2016/03/03/rails5-redirect-to-back/"/>
    <updated>2016-03-03T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/03/03/rails5-redirect-to-back</id>
    <content type="html"><![CDATA[<p>В Rails 4.x для возврата на предыдущую страницу, использовался метод <code>redirect_to :back</code>.
Иногда, при использовании данного метода в контроллере, мы могли получать ошибку <code>ActionController::RedirectBackError</code>,
это случалось тогда, когда не был установлен <code>HTTP_REFERER</code> в заголовках запроса.</p>

<!-- more -->


<p>Рассмотрим пример, в котором обработаем ошибку <code>ActionController::RedirectBackError</code> и заставим наше приложение редиректить на <code>root_url</code> в случае отсутствия заголовка <code>HTTP_REFERER</code>:</p>

<pre><code class="ruby">class PostsController &lt; ApplicationController

  rescue_from ActionController::RedirectBackError, with: :redirect_to_default

  def publish
    post = Post.find params[:id]
    post.publish!
    redirect_to :back
  end

  private

  def redirect_to_default
    redirect_to root_path
  end

end
</code></pre>

<p>В случае возникновения ошибки, сработает приватный метод <code>redirect_to_default</code>, который отредиректит на корневой path.</p>

<h3>Rails 5</h3>

<p>В Rails 5, <code>redirect_to :back</code> считается <em>deprecated</em>, и вместо него появился новый метод который называется - <code>redirect_back</code>.
В нем в качестве дополнительной опции можно передать <code>fallback_location</code>, и таким образом избавиться от тех костылей которые мы реализовывали выше.</p>

<p>Изменим наш пример для Rails 5</p>

<pre><code class="ruby">class PostsController &lt; ApplicationController

  def publish
    post = Post.find params[:id]
    post.publish!
    redirect_back(fallback_location: root_path)
  end

end
</code></pre>

<p>Как видите все стало намного прозрачнее и проще!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 5 использование #belongs_to]]></title>
    <link href="http://gururuby.ru/blog/2016/02/27/rails5-belongs-to-required/"/>
    <updated>2016-02-27T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/02/27/rails5-belongs-to-required</id>
    <content type="html"><![CDATA[<p>В Rails 5 при указании <code>belongs_to</code> в модели, невозможно будет сохранить запись без наличия ассоциированного объекта.
Раньше эта опция также существовала, и теперь она включена по дефолту.</p>

<!-- more -->


<p>Рассмотрим пример:</p>

<pre><code class="ruby">class User &lt; ApplicationRecord
end

class Post &lt; ApplicationRecord
  belongs_to :user
end

post = Post.create(title: 'Hi')
  =&gt; &lt;Post id: nil, title: "Hi", user_id: nil, created_at: nil, updated_at: nil&gt;

post.errors.full_messages.to_sentence
  =&gt; "User must exist"
</code></pre>

<p>В Rails 4.x добиться такого поведения можно, указав дополнительную опцию в вызов метода</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
end

class Post &lt; ActiveRecord::Base
  belongs_to :user, required: true
end

post = Post.create(title: 'Hi')
=&gt; &lt;Post id: nil, title: "Hi", user_id: nil, created_at: nil, updated_at: nil&gt;

post.errors.full_messages.to_sentence
=&gt; "User must exist"
</code></pre>

<p>Вернуть дефолтное поведение в Rails 5 можно, передав опцию <code>optional: true</code> в вызове метода</p>

<pre><code class="ruby">class Post &lt; ApplicationRecord
  belongs_to :user, optional: true
end

post = Post.create(title: 'Hi')
=&gt; &lt;Post id: 2, title: "Hi", user_id: nil&gt;
</code></pre>

<p>Для того чтобы вернуть старое поведение для всего проекта, идем в папку <code>initializers</code>  нашего проекта,
и видим что в Rails 5 появился новый файл под названием <code>active_record_belongs_to_required_by_default.rb</code>
И именно в нем видим настройку, которая отвечает за новое поведение. Мы можем установить ее в <code>false</code>,
чтобы отключить его.</p>

<pre><code class="ruby ">Rails.application.config.active_record.belongs_to_required_by_default = false
</code></pre>

<p>Напомню, что данный файл создается при новой установке Rails 5, в том случае если вы обновляете Rails до версии 5, создайте его вручную.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Attributes в Rails 5]]></title>
    <link href="http://gururuby.ru/blog/2016/02/11/rails-5-attributes/"/>
    <updated>2016-02-11T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/02/11/rails-5-attributes</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/rails5.jpg"></p>

<p>В Rails 5 много нововведений, одним из них является ActiveRecord Attributes.
Эта фича позволяет добавлять аттрибут в модель Rails и обработать его согласно указанному типу.
Посмотрим насколько полезен этот новый функционал.</p>

<!-- more -->


<p>Рассмотрим пример. У нас есть модель пользователей - User. Миграция и сама модель описаны ниже.</p>

<pre><code class="ruby">class CreateUsers &lt; ActiveRecord::Migration
  def change
    create_table :users do |t|
      t.string :name
      t.integer :age
      t.string :male
      t.timestamps(null: false)
    end
  end
end

class User &lt; ActiveRecord::Base
end
</code></pre>

<p>Обратите внимание на колонку <code>male</code>, мы могли бы вполне сделать ее с типом <code>boolean</code>, но в данном примере это сделано специально,
чтобы показать как мы сможем использовать Attributes.</p>

<p>Хотя бывают и реальные случаи, когда изначально в архитектуре проекта был неверно выбран
тип данных, и по прошествии времени, изменение типа будет болезненным.</p>

<p>Давайте воспользуемся нововведением. Укажем колонку <code>male</code> как аттрибут, с типом <code>boolean</code></p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  attribute :male, :boolean
end
</code></pre>

<p>Теперь мы можем использовать колонку так, как будто ее тип <code>boolean</code>, например:</p>

<pre><code class="ruby">user = User.new(male: 'yes')
user.male
# =&gt; true

user = User.new(male: 'f')
user.male
# =&gt; false

user = User.new(male: 0)
user.male
# =&gt; false
</code></pre>

<p>Вот так легко теперь можно решить проблему несовместимости типов данных указанных в таблице БД и требований согласно бизнес логике.
ActiveRecord Attributes поддерживает основные типы данных, ниже список:</p>

<ul>
<li>:big_integer</li>
<li>:binary</li>
<li>:boolean</li>
<li>:date</li>
<li>:date_time</li>
<li>:decimal</li>
<li>:float</li>
<li>:integer</li>
<li>:string</li>
<li>:text</li>
<li>:time</li>
</ul>


<p>Аттрибут не обязательно может быть колонкой в таблице, можно применять его и для обычных аттрибутов модели.
Добавим для модели <code>User</code> аттрибут <code>confirmed_at</code>, и укажем тип данных <code>:date_time</code>, и все будет корректно
обрабатываться. При этом мы не указываем аттрибут через <code>attr_accessor</code>.</p>

<pre><code class="ruby">class User
  attribute :confirmed_at, :date_time
end

user = User.new
user.confirmed_at = '2016-02-12 03:00'
user.confirmed_at
# =&gt; Fri, 12 Feb 2016 03:00:00 UTC +03:00

user = User.new
user.confirmed_at = '2016/02/12'
user.confirmed_at
# =&gt; Fri, 12 Feb 2016 00:00:00 UTC +03:00
</code></pre>

<h3>Свой обработчик ActiveRecord Attributes</h3>

<p>Допустим у нас есть модель <code>Transaction</code>, и в поле цена, к нам приходит строка в виде <code>$100</code>,
а мы хотим сохранять в базу данных значение в центах, и цифрой, а также использовать строку в запросах.</p>

<p>Для решения этой задачи, нам необходимо добавить свой тип данных, и в этом <code>Attributes</code> нам поможет.
Создадим класс <code>MoneyType</code>, и напишем свой метод <code>type_cast</code>, который используется для преобразования данных.</p>

<pre><code class="ruby">class MoneyType &lt; ActiveRecord::Type::Integer
  def type_cast(value)
    if value.include?('$')
      price_in_dollars = value.gsub(/\$/, '').to_f
      price_in_dollars * 100
    else
      value.to_i
    end
  end
end
</code></pre>

<p>Укажем обработчик для колонки <code>price</code></p>

<pre><code class="ruby">class Transaction &lt; ActiveRecord::Base
  attribute :price, MoneyType.new
end
</code></pre>

<p>Если все сделали верно, то теперь мы можем делать вот такие запросы, и быть уверенными что все отработает как надо</p>

<pre><code class="ruby">Transaction.where(price: '$10.00')
# =&gt; SELECT * FROM transactions WHERE price = 1000
</code></pre>

<p>Как видите очень удобно и просто. Возьмите на заметку :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кэширование коллекций в Rails 5]]></title>
    <link href="http://gururuby.ru/blog/2016/02/07/activerecord-relation-cache-key/"/>
    <updated>2016-02-07T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/02/07/activerecord-relation-cache-key</id>
    <content type="html"><![CDATA[<p><img src="/images/train.jpg">
<a href="http://rusrails.ru/caching-with-rails-an-overview">Кэширование</a> в Rails позволяет повысить производительность вашего приложения.
В Rails 5 теперь можно кешировать коллекции записей, благодаря методу:
<code>ActiveRecord::Relation#cache_key</code></p>

<!-- more -->


<h3>Что из себя представляет кэширование коллекций</h3>

<p>Рассмотрим пример, в котором нам нужно получить коллекцию пользователей с определенным именем.
<code>ruby
@users = User.where(name: 'Михаил')
</code>
В переменной <code>@users</code> мы получим некую коллекцию записей, которая будет являться объектом класса <code>ActiveRecord::Relation</code>
Результат нашего запроса не изменится если будут выполнены следующие условия:</p>

<ul>
<li>Мы будем искать также <code>Михаила</code></li>
<li>За время нашего запроса записи не были удалены</li>
<li>За время нашего запроса не было добавлено новых записей</li>
</ul>


<p>Rails комьюнити <a href="https://github.com/rails/rails/pull/20884">предложило</a> реализовать кэширование для коллекций.
Метод <code>cache_key</code> был добавлен в <code>ActiveRecord::Relation</code>, и он учитывает множество факторов,
включая изменение запроса, <code>updated_at</code> для запроса, и значение счетчика записей в коллекции.</p>

<h3>ActiveRecord::Relation#cache_key</h3>

<p>Итак у нас есть коллекция пользователей, давайте вызовем у этой коллекции метод <code>cache_key</code>
<code>ruby
@users.cache_key
 =&gt; "users/query-67sa32b36805c4b1ec1948b4eef8d58f-3-20160116111659084027"
</code>
Мы получим вот такую запись. Сейчас подробнее рассмотрим что она означает.</p>

<ul>
<li><code>users</code> представляет название коллекции, основанной на модели User</li>
<li><code>query-</code> не меняющаяся часть, всегда будет присутствовать</li>
<li><code>67sa32b36805c4b1ec1948b4eef8d58f</code> md5 сумма, котрая образуется из SQL. В нашем примере это <code>MD5("SELECT "users".* FROM "users" WHERE "users"."name" = 'Михаил'")</code></li>
<li><code>3</code> размер коллекции</li>
<li><code>20160116111659084027</code> временная метка(timestamp). Это значение соответствует самому свежему updated_at в коллекции.</li>
</ul>


<h3>Как использовать?</h3>

<p>Один из примеров, как можно применить <code>cache_key</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="err">Михаил</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if users.cache_key == current_cache_key</span>
</span><span class='line'><span class="sr"> # не используем запрос, и возвращаем кешированную страницу</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr"> # получаем данные из базы данных</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>В модели нет колонки <code>:updated_at</code>. Что делать?</h3>

<p>По умолчанию, для создания timestamp, <code>cache_key</code> использует колонку <code>:updated_at</code>
Это дефолтная реализация. Если у вас этой колонки нет, но есть другая, с названием отличным от стандартного, вы можете
использовать ee, указав как аргумент в вызове метода <code>cache_key</code>
<code>ruby
products = Product.where(category: 'cars')
 products.cache_key(:last_bought_at)
 =&gt; "products/query-211ae6b96ec456b8d7a24ad5fa2f8ad4-4-20160118080134697603"
</code></p>

<h3>Особенности использования</h3>

<h4>Использование limit в запросах</h4>

<p>Рассмотрим 2 варианта.
Если мы хотим получить <code>3</code> пользователя с именем &lsquo;Михаил&rsquo;, то <code>cache_key</code> корректно работает.
<code>ruby
users = User.where(name: 'Михаил').limit(3)
users.cache_key
 =&gt; "users/query-67ed32b36805c4b1ec1948b4eef8d58f-3-20160116144936949365"
</code></p>

<p>Но если мы вызовем <code>cache_key</code> не извлекая записи в <code>@users</code>, то получим следующую картину.</p>

<pre><code class="ruby">User.where(name: 'Алексей').limit(3).cache_key
 =&gt; "users/query-8dc512b1408302d7a51cf1177e478463-5-20160116144936949365"
</code></pre>

<p>В итоге мы получаем всех пользователей, и наш <code>limit</code> не учитывается. Это особенность реализации метода.
<a href="https://github.com/rails/rails/blob/39f383bad01e52c217c9007b5e9d3b239fe6a808/activerecord/lib/active_record/collection_cache_key.rb#L16">ActiveRecord::Base#collection_cache_key</a>.</p>

<h4><code>Cache_key</code> не меняется, при изменении порядка записей в коллекции</h4>

<p>Например:</p>

<pre><code class="ruby">users1 = User.where(name: 'Михаил').order('id desc').limit(3)
users1.cache_key
 =&gt; "users/query-648522f6b3a53e0a7f7b63d5967afaf7-3-20160207084207845084"
</code></pre>

<p>В итоге мы получаем пользователей с ids - <code>[5, 4, 3]</code>
Теперь попробуем удалить пользователя с <code>id = 3</code></p>

<pre><code class="ruby">User.find(3).destroy

 users2 = User.where(name: 'Михаил').order('id desc').limit(3)
 users2.cache_key
 =&gt; "users/query-648522f6b3a53e0a7f7b63d5967afaf7-3-20160207084207845084"
</code></pre>

<p>Обратите внимание, что <code>cache_key</code> совпадают в обоих примерах.
Это происходит потому, что ни один из параметров, влияющих на ключ кэша не изменяется. Т.е. ни количество записей, ни запрос, ни метка времени последней записи.</p>

<h3>Использование <code>group</code> в запросах</h3>

<p>Также как и в случае с <code>limit</code>, <code>cache_key</code> ведет себя по-разному, в случаях когда записи уже есть в памяти и когда их еще нет.
Допустим у нас есть несколько пользователей с одинаковыми именами:</p>

<pre><code class="ruby">User.select(:name, :updated_at).group(:name).cache_key
 =&gt; "users/query-1eabedee52c695b4c97f6d560211e970-3-20160207084207845084" 
</code></pre>

<p>В результате мы получаем размер записей <code>3</code>, в данном случае это будет количество записей в группе.
Теперь посмотрим что будет, если коллекция будет загружена в память</p>

<pre><code class="ruby">@users = User.select(:name, :updated_at).group(:name)
@users.cache_key
 =&gt; "users/query-1eabedee52c695b4c97f6d560211e970-1-20160207084207845084" 
</code></pre>

<p>Теперь размер коллекции составляет <code>1</code>. Т.е кол-во групп.
Эти особенности нужно учитывать, иначе они могут сыграть злую шутку.</p>
]]></content>
  </entry>
  
</feed>
