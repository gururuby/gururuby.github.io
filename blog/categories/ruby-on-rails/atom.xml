<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Gururuby.ru | Блог Ruby-разработчика]]></title>
  <link href="http://gururuby.ru/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://gururuby.ru/"/>
  <updated>2016-01-30T00:21:56+03:00</updated>
  <id>http://gururuby.ru/</id>
  <author>
    <name><![CDATA[Gururuby.ru]]></name>
    <email><![CDATA[i@gururuby.ru]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Тестируем внешние сервисы легко!]]></title>
    <link href="http://gururuby.ru/blog/2016/01/29/stubbing-external-services/"/>
    <updated>2016-01-29T22:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/01/29/stubbing-external-services</id>
    <content type="html"><![CDATA[<p><img src="/images/vcr.jpg">
В любом крупном проекте, так или иначе, но приходится сталкиваться с использованием внешних сервисов.
Это может быть шлюз для отправки SMS, или сервис для получения курсов валют. В этой статье я опишу
как тестировать их легко и приятно.</p>

<!-- more -->


<p>API социальных сетей, платежных систем, и прочее прочее. Сейчас редко крупный проект обходится без привязки к внешним сервисам.
Тестировать код, связанный со внешними сервисами не всегда легко, это издержки сети, медленное соединение. Лучше
изолировать эти тесты с помощью заглушек.</p>

<h3>Имитация сервиса на примере конвертера валют</h3>

<p>Допустим у нас есть некая система, которая использует внешний сервис <a href="http://fixer.io/">Fixer.io</a> для получения курсов валют, и преобразования
некой суммы в ту валюту, которую укажет клиент.</p>

<pre><code class="ruby converter.rb">class Converter
  def initialize(amount, source = "RUB", target = "USD")
    @amount = amount
    @target = target
    @source = source
  end

  def convert!
    body = get_exchange_rate_from_api
    rate = extract_exchange_rate(body)
    @amount * rate
  end

  private

  def extract_exchange_rate(body)
    JSON.parse(body)["rates"][@target]
  end

  def get_exchange_rate_from_api
    url = URI(api_url)
    Net::HTTP.get(url)
  end

  def api_url
    "http://api.fixer.io/latest?symbols=#{@target}&amp;base=#{@source}"
  end
end
</code></pre>

<p>Наш код прекрасно работает на production сервере. Но мы не хотим, чтобы при тестировании приложения, отправлялись реальные
запросы к сервису. Давайте посмотрим какие инструменты наиболее популярны для решения этой задачи.</p>

<h3>Webmock</h3>

<p>Webmock это библиотека для создания и использования заглушек HTTP запросов. Это довольно простой и удобный инструмент, и подходит
для использования в связке с Rspec, Minitest, Test::Unit</p>

<p>Настройка Webmock проста. На странице проекта есть <a href="https://github.com/bblimke/webmock">инструкция по установке</a>. Она сводится к установке gem, и прописыванию библиотеки в
<code>spec_helper.rb</code> или в <code>test_helper.rb</code></p>

<pre><code class="ruby test_helper.rb">require 'webmock/minitest'
</code></pre>

<pre><code class="ruby spec_helper.rb">require 'webmock/rspec'
</code></pre>

<p>Давайте посмотрим как будет выглядеть тест на Rspec, написанный с использованием Webmock</p>

<pre><code class="ruby converter_spec.rb">require 'rails_helper'

Rspec.describe Converter do

 before do
     stub_request(:get, "http://api.fixer.io/latest?symbols=USD&amp;base=EUR").
          to_return(:body =&gt; %Q(
    {
    "base": "EUR",
    "date": "2016-01-29",
    "rates": {
    "USD": 2.0
    }
    }
    ))
 end

 it 'should convert eur to usd' do
    expect(Converter.new(2, "EUR", "USD").convert!).to_eq(4)
 end

end 
</code></pre>

<p>Все довольно просто. Теперь когда наш код в тесте будет обращаться по url <code>http://api.fixer.io/latest?symbols=USD&amp;base=EUR</code>
, вызов сервиса будет заглушаться, и вместо реального запроса мы получим то, что указали в <code>to_return</code>.</p>

<p>Webmock позволяет легко создавать заглушки для сервиса, но есть и подводные камни. Если вдруг ответ реального сервера поменялся, например
поменялось API, то мы не сможем отследить это изменение через тест.</p>

<h3>VCR</h3>

<p>Решить проблему, обозначенную выше помогает - <a href="https://github.com/vcr/vcr">VCR</a>. Его отличие от Webmock в том, что VCR
записывает реальный HTTP-ответ от сервиса и использует его потом изолированно в тестах. Запись производится в YAML файл.</p>

<p>Настройка и установка также простая. Установить gem, и добавить конфигурационные строчки в <code>test_helper.rb</code> или <code>spec_helper.rb</code></p>

<pre><code class="ruby spec_helper.rb">require 'vcr'

VCR.configure do |config|
  # Указываем где будем хранить наши кассеты )
  config.cassette_library_dir = "fixtures/vcr_cassettes"
  # Интегрируемся с webmock 
  config.hook_into :webmock # or :fakeweb
end
</code></pre>

<p>Вот пример мини-теста с использованием VCR</p>

<pre><code class="ruby converter_test.rb">class ConverterTest &lt; Minitest::Test
  def it_converts_eur_to_usd
    VCR.use_cassette("eur_to_usd_conversion") do
      assert_equals 4, Converter.convert!(4.3932, "EUR", "USD")
    end
  end
end
</code></pre>

<p>Во время запуска этого теста, будет послан реальный запрос к сервису, а ответ записан в yml-файл c названием, которое было указано
как аргумент в <code>VCR.use_cassette</code>.</p>

<p>Вот так примерно будет выглядеть ответ, записанный в файл:</p>

<pre><code class="yaml test/fixtures/vcr_cassettes/eur_to_usd_conversion.yml">---
http_interactions:
- request:
    method: get
    uri: http://api.fixer.io/latest?base=EUR&amp;symbols=USD
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.fixer.io
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.4.6 (Ubuntu)
      Date:
      - Fri, 29 Jan 2016 23:00:20 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '56'
      Connection:
      - keep-alive
      Status:
      - 200 OK
      Last-Modified:
      - Wed, 28 Jan 2016 00:00:00 GMT
      X-Content-Type-Options:
      - nosniff
    body:
      encoding: UTF-8
      string: '{"base":"EUR","date":"2016-01-29","rates":{"USD":1.099}}'
    http_version:
  recorded_at: Fri, 29 Jan 2016 23:00:20 GMT
recorded_with: VCR 3.0.0
</code></pre>

<p>При последующем обращении к сервису, будет использоваться этот запрос, который записан в файл. Это довольно удобно, особенно
когда нужно использовать один и тот же запрос в разных местах.</p>

<h3>Внедрение зависимости (Dependency Injection)</h3>

<p>Еще один из способов, состоит во внедрении паттерна проектирования <a href="https://ru.wikipedia.org/wiki/%D0%92%D0%BD%D0%B5%D0%B4%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B8">Dependency Injection</a>.
Посмотрим на примере нашего конвертера, как можно использовать его.</p>

<pre><code class="ruby converter.rb">class Converter
  def initialize(amount, source = "EUR", target = "USD", api = FixerAPI)
    @amount = amount
    @target = target
    @source = source
    @api    = api
  end

  def convert!
    rate = @api.get_exhange_rate(source: @source, target: @target)
    @amount * rate
  end
end
</code></pre>

<p>Итак, мы внедрили в конструктор класса Converter, FixerAPI класс, который представляет собой обертку для работы с сервисом Fixer.
Вот так выглядит наш FixerAPI класс</p>

<pre><code class="ruby fixer_api.rb">class FixerAPI
  def self.get_exchange_rate(source: source, target: target)
    new.get_exhange_rate(source: source, target: target)
  end

  def get_exchange_rate(source: source, target: target)
    url = URI(api_url(source, target))
    body = Net::HTTP.get(url)
    JSON.parse(body)["rates"][target]
  end

  private

  def api_url(source, target)
    "http://api.fixer.io/latest?symbols=#{target}&amp;base=#{source}"
  end
end
</code></pre>

<p>Мы вынесли работу с внешним сервисом в отдельный класс, и можем его включать в любом месте где захотим. И в этом состоит суть
внедрения зависимости. Так как код стал изолирован, то и тестировать его можно, заменив например FixerAPI каким-нибудь FakeAPI.</p>

<pre><code class="ruby converter_test.rb">class FakeAPI
  def self.get_exchange_rate(source: source, target: target)
    2
  end
end

class ConverterTest &lt; Minitest::Test
  def it_converts_eur_to_usd
    assert_equals 4, Converter.convert!(2, "EUR", "USD", FakeAPI)
  end
end
</code></pre>

<h3>Написать свой тестовый сервис</h3>

<p>Я не буду долго рассматривать этот способ, так как считаю его очень сложным. Но он имеет место быть.
Если коротко, то мы можем написать тестовый сервер, который будет работать например на <a href="https://nathanhoad.net/how-to-return-json-from-sinatra">Sinatra</a>. Он будет возвращать нам нужные данные.
Их мы и будем использовать в наших тестах.</p>

<pre><code class="ruby fixer_server.rb">require 'sinatra'

get '/latest' do
  content_type :json
  { base: "EUR", date: "2015-12-15", rates: { usd: 1.099 } }.to_json
end
</code></pre>

<h3>Заключение</h3>

<p>Проблема вполне решаема, разными способами, но лично я остановился бы на VCR. Но конечно нужно смотреть еще
на целесообразность использования того или инструмента для облегчения тестирования внешних сервисов.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Простой чат с помощью ActionCable]]></title>
    <link href="http://gururuby.ru/blog/2015/12/18/simple-chat-via-action-cable/"/>
    <updated>2015-12-18T23:10:01+03:00</updated>
    <id>http://gururuby.ru/blog/2015/12/18/simple-chat-via-action-cable</id>
    <content type="html"><![CDATA[<p><img src="/images/action_cable.png">
ActionCable, который ожидается в Rails 5, наконец на этой неделе был <a href="https://github.com/rails/rails/pull/22585">замержен</a> в мастер ветку Rails.
Давайте создадим простой чат на его основе.</p>

<!-- more -->


<p>Если вы не знаете, что такое ActionCable, то это библиотека, которая позволяет интегрировать WebSocket-ы c вашим Rails-приложением
Т.е мы имеем необходимый инструмент как на стороне клиента, так и на стороне сервера.</p>

<p>Итак, нам понадобится:</p>

<ul>
<li>Установленный Redis (для пользователей Ubuntu достаточно одной команды <code>sudo apt-get install redis-server</code>)</li>
<li>Rails 4.2 +</li>
</ul>


<h3>Создаем костяк проекта</h3>

<p>Назовем его chat, пропускаем установку gems, с помощью опции -B</p>

<pre><code class="bash ">rails new chat -B
</code></pre>

<p>Теперь о необходимых гемах для работы нашего чата, нам понадобится:</p>

<ul>
<li>Сервер приложения - <a href="https://github.com/puma/puma">Puma</a>. Webrick тут не подходит так как ActionCable использует отдельный процесс нашего App сервера, и
поэтому нам нужен многопоточный сервер Puma или <a href="https://github.com/macournoyer/thin/">Thin</a></li>
<li>Шаблонизатор <a href="https://github.com/slim-template/slim-rails">slim</a> (просто привычка работать именно с ним)</li>
<li><a href="https://github.com/rails/actioncable">ActionCable</a></li>
</ul>


<p>Ваш Gemfile должен выглядеть примерно вот так:</p>

<pre><code class="ruby Gemfile">source 'https://rubygems.org'
gem 'rails', '4.2.5'
gem 'sqlite3'
gem 'sass-rails', '~&gt; 5.0'
gem 'uglifier', '&gt;= 1.3.0'
gem 'coffee-rails', '~&gt; 4.1.0'
gem 'jquery-rails'
gem 'turbolinks'
gem 'jbuilder', '~&gt; 2.0'
gem 'sdoc', '~&gt; 0.4.0', group: :doc

gem 'actioncable', github: 'rails/actioncable'
gem 'slim-rails'
gem 'puma'

group :development, :test do
  gem 'byebug'
end

group :development do
  gem 'web-console', '~&gt; 2.0'
  gem 'spring'
end
</code></pre>

<p>Выполняем установку gems, <code>bundle install</code></p>

<h3>Структура проекта</h3>

<p>В нашем проекте будут контроллеры:</p>

<ul>
<li>MessagesController - будет отвечать за вывод сообщений и их создание</li>
<li>SessionsController - в нем мы создадим простую cookie-аутентификацию для пользователя</li>
</ul>


<p>При создании контроллеров будем использовать дополнительные опции, &ndash;no-helper и &ndash;no-assets,
чтобы не &ldquo;плодить&rdquo; лишние файлы.</p>

<h3>Контроллеры и маршруты</h3>

<p>Создаем контроллер Sessions
<code>bash
rails g controller Sessions --no-helper --no-assets
</code>
Добавляем create action
<figure class='code'><figcaption><span>app/controllers/sessions_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def create</span>
</span><span class='line'><span class="sr">    cookies.signed[:username] = params[:session][:username]</span>
</span><span class='line'><span class="sr">    redirect_to messages_path</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">Создаем</span> <span class="err">контроллер</span> <span class="no">Messages</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;bash</span>
</span><span class='line'><span class="sr">rails g controller Messages &amp;ndash;no-helper &amp;ndash;no-assets</span>
</span></code></pre></td></tr></table></div></figure>
Action для index не обязателен, мы его опустим, создадим action create</p>

<pre><code class="ruby app/controllers/messages_controller.rb">class MessagesController &lt; ApplicationController

  def create
    head :ok
  end

end
</code></pre>

<p>В нем мы возвращаем заголовок <code>:ok</code> для ajax запроса.
Теперь пропишем маршруты для наших контроллеров в <code>routes.rb</code></p>

<pre><code class="ruby app/config/routes.rb">Rails.application.routes.draw do
  resources :messages, only: [:index, :create]
  resources :sessions, only: [:new, :create]

  root 'sessions#new'
end
</code></pre>

<p>Корень нашего чата будет вести на логин пользователя</p>

<h3>Создаем View</h3>

<p>Для начала создадим страничку <code>new</code> для <code>SessionsController</code>, в которой будет простая форма с одним инпутом
<code>slim app/views/sessions/new.html.slim
= form_for :session, url: sessions_path do |form|
  = form.label :username, 'Ваш никнейм'
  br
  = form.text_field :username
  br
  = form.submit 'Войти в чат'
</code>
Теперь создадим страницу на которой будут выводиться все сообщения и в ней будет находиться форма с созданием нового сообщения
<figure class='code'><figcaption><span>app/views/messages/index.html.slim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">p</span>
</span><span class='line'>  | Вы вошли как
</span><span class='line'>  &amp;lsquo;
</span><span class='line'>  <span class="nt">b</span> <span class="si">#{</span><span class="n">cookies</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="si">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;messages&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;br&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;= form_for :message, url: messages_path, remote: true, id: &amp;lsquo;messages-form&amp;rsquo; do |form|
</span><span class='line'>  <span class="p">=</span> <span class="n">form</span><span class="o">.</span><span class="n">label</span> <span class="ss">:body</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="err">Введите</span> <span class="err">сообщение</span><span class="ss">:&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">form</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">form</span><span class="o">.</span><span class="n">submit</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="err">Отправить</span> <span class="err">сообщение</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>&lt;code&gt;``
</span><span class='line'>Здесь мы выведем имя залогинившегося пользователя, и создадим контейнер для сообщений&lt;/code&gt;#messages`&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;Настройка ActionCable(backend)&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Для работы с ActionCable необходимо создать 2 класса &lt;code&gt;Connection&lt;/code&gt; и &lt;code&gt;Channel&lt;/code&gt;
</span><span class='line'>Создадим их в папке &lt;code&gt;app/channels/application_cable&lt;/code&gt;
</span><span class='line'>Прописывать &lt;code&gt;channels&lt;/code&gt; в autoloads не нужно, Rails подгрузит их по умолчанию
</span><span class='line'>&lt;code&gt;ruby app/channels/application_cable/connection.rb
</span><span class='line'><span class="nt">module</span> ApplicationCable
</span><span class='line'>  <span class="nt">class</span> Connection &amp;lt; ActionCable::Connection::Base
</span><span class='line'>  <span class="nt">end</span>
</span><span class='line'><span class="nt">end</span>
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class=&quot;ruby app/channels/application_cable/channel.rb&quot;&gt;module ApplicationCable
</span><span class='line'>  <span class="nt">class</span> Channel &amp;lt; ActionCable::Channel::Base
</span><span class='line'>  <span class="nt">end</span>
</span><span class='line'><span class="nt">end</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;Настройка Redis&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ActionCable использует Redis, добавим конфигурационный файл в &lt;code&gt;config/redis/cable.yml&lt;/code&gt;.
</span><span class='line'>Настройки довольно стандартные для Redis.
</span></code></pre></td></tr></table></div></figure>yml config/redis/cable.yml
default: &amp;default
  url: redis://localhost:6379
  host: localhost
  port: 6379
  timeout: 1
  inline: true</p>

<p>development: <em>default
test: </em>default
<code>
Так как ActionCable использует отдельный процесс, то создадим rackup файл с конфигурацией `cable/config.ru`
</code>ruby cable/config.ru
require ::File.expand_path(&lsquo;../../config/environment&rsquo;,  <strong>FILE</strong>)
Rails.application.eager_load!</p>

<p>require &lsquo;action_cable/process/logging&rsquo;</p>

<p>run ActionCable.server
<code>
Для удобства запуска нашего ActionCable сервера, давайте добавим sh скрипт в папку `bin` и назовем его `cable`
</code>bash bin/cable</p>

<h1>/bin/bash</h1>

<p>bundle exec puma -p 28080 cable/config.ru
<code>``
Не забываем поставить этому файлу права на исполнение</code>chmod +x bin/cable`</p>

<p>Теперь создадим <code>MessagesChannel</code>, ответственный за подписку на стрим</p>

<pre><code class="ruby app/channels/messages_channel.rb">class MessagesChannel &lt; ApplicationCable::Channel
  def subscribed
    stream_from 'messages'
  end
end
</code></pre>

<p>Далее изменим наш action <code>create</code> в MessagesController, добавим функционал по отсылке сообщений
<figure class='code'><figcaption><span>app/controllers/messages_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="no">ActionCable</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">broadcast</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">messages</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>                                 <span class="ss">message</span><span class="p">:</span> <span class="n">message_params</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                 <span class="ss">username</span><span class="p">:</span> <span class="n">cookies</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span>
</span><span class='line'>    <span class="n">head</span> <span class="ss">:ok</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">message_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Настройка client-side</h3>

<p>Создадим папку <code>channels</code> в <code>app/assets/javascripts</code>.
Сначала необходимо создать соединение с нашим ActionCable сервером, создаем <code>index.coffee</code>
```coffee app/assets/javascripts/channels/index.coffee</p>

<h1>= require cable</h1>

<h1>= require_self</h1>

<h1>= require_tree .</h1>

<p>@App = {}
App.cable = Cable.createConsumer &lsquo;ws://127.0.0.1:28080&rsquo;
<code>``
Теперь подпишемся на</code>MessagesChannel<code>, создаем</code>messages.coffee`</p>

<pre><code class="coffee app/assets/javascripts/channels/messages.coffee">App.messages = App.cable.subscriptions.create 'MessagesChannel',
  received: (data) -&gt;
    $('#messages').append @renderMessage(data)

  renderMessage: (data) -&gt;
    "&lt;p&gt;&lt;b&gt;[#{data.username}]:&lt;/b&gt; #{data.message}&lt;/p&gt;"
</code></pre>

<p>Здесь в функции <code>received</code> мы получаем данные и вставляем отрендеренные сообщения в <code>#messages</code> контейнер</p>

<p>Теперь добавим наш js(<code>//= require channels</code>) в <code>application.js</code>
<code>js app/assets/javascripts/application.js
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require channels
//= require_tree .
</code></p>

<h3>Наш чат готов!</h3>

<p>Запускаем наше rails приложение <code>rails s</code>, потом запускаем <code>./bin/cable</code>. Открываем либо два браузера, либо
запускаем вкладку в режиме инкогнито, переходим на <a href="http://localhost:3000">http://localhost:3000</a> и проверяем работу чата.</p>
]]></content>
  </entry>
  
</feed>
