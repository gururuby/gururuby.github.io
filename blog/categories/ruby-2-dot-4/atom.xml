<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby-2.4 | Gururuby.ru | Блог Ruby-разработчика]]></title>
  <link href="http://gururuby.ru/blog/categories/ruby-2-dot-4/atom.xml" rel="self"/>
  <link href="http://gururuby.ru/"/>
  <updated>2017-09-19T16:04:21+03:00</updated>
  <id>http://gururuby.ru/</id>
  <author>
    <name><![CDATA[Gururuby.ru]]></name>
    <email><![CDATA[i@gururuby.ru]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Что нового в Ruby 2.4?]]></title>
    <link href="http://gururuby.ru/blog/2016/12/15/whats-new-in-ruby-2-4/"/>
    <updated>2016-12-15T10:40:46+03:00</updated>
    <id>http://gururuby.ru/blog/2016/12/15/whats-new-in-ruby-2-4</id>
    <content type="html"><![CDATA[<p><img src="/images/15-12-2016.jpg">
Скоро выйдет стабильный релиз Ruby 2.4. Ознакомимся что же нас ждет нового.</p>

<!-- more -->


<h2>Float#round</h2>

<p>Изменилось поведение метода <code>round</code>. Разработчики добавили возможность указать в какую сторону необходимо округлять, передав в этот
метод дополнительный параметр <code>:half</code>, который может принимать значения: <code>:even, :up, :down</code>.
Для примера:</p>

<pre><code class="ruby">(3.5).round(half: :up)
=&gt; 4
</code></pre>

<p>Эти изменения касаются также таких методов как: <code>floor, ceil, truncate</code>. В них можно передать эту опцию.</p>

<h2>IO#gets</h2>

<p>Напомню что метод gets используется для получения пользовательского ввода в вашем скрипте. Вы наверняка использовали его
в задачках по Ruby. Так вот, если пользователь вводил какие либо данные, к вам в результате приходила строка с переносом <code>\n</code>
Чтобы его убрать использовался метод chomp. Теперь мы можем указать опцию <code>chomp</code> в методе gets</p>

<pre><code class="ruby"># 2.3
input_string = gets
=&gt; 'tratata\n'
# 2.4
input_string = gets(chomp: true)
=&gt; 'tratata'
</code></pre>

<h2>Dir, File, Pathname #empty?</h2>

<p>Поздравляю теперь мы можем передать путь в метод <code>empty?</code> и выяснить содержит ли папка/файл/путь что-то внутри
Метод <code>File.empty?</code> эквивалентен методу <code>File.zero?</code>, который уже давно был в библиотеке для работы с файлами.</p>

<h2>Hash#transform_values</h2>

<p>Как по мне довольно удобный метод добавили в класс Hash. Теперь мы можем изменять значения hash в итераторе.
Например вот так:</p>

<pre><code class="ruby"># 2.4
data = {x: 1, y: 2, z: 3}
data.transform_values{|value| value * 2 }
=&gt; {x: 2, y: 4, z: 6}
</code></pre>

<h2>Kernel#clone</h2>

<p>При использовании <code>clone</code> или <code>dup</code>, можно теперь передать дополнительный аргумент, в котором указать будет ли объект
<code>freeze</code>(недоступным для изменения).</p>

<pre><code class="ruby"># 2.4
frozen_string = "frozen".freeze
dup = frozen_string.clone(freeze: false)

dup.frozen?
=&gt; false
</code></pre>

<h2>Binding#irb</h2>

<p>Есть такой замечательный gem <code>pry</code>. Достаточно в любом месте кода поместить <code>binding.pry</code> и у вас появляется возможность
использовать консоль pry для дебага вашего приложения. В Ruby 2.4 добавлена похожая фича, только нужно указать <code>binding.irb</code>.</p>

<h2>Regexp#match?</h2>

<p>Для регулярок добавили новый метод <code>match?</code> который работает аж в 3 раза быстрее чем методы <code>match, ===, =~</code>.
При использовании медленных методов, руби создавал объект класса <code>MatchData</code>,
а в новом методе он не создается, за счет этого повышенная скорость работы.</p>

<pre><code class="ruby">/^foo (\w+)$/ =~ 'foo bar'      # =&gt; 0
                                # =&gt; #&lt;MatchData "foo bar" 1:"bar"&gt;

/^foo (\w+)$/.match('foo baz')  # =&gt; #&lt;MatchData "foo baz" 1:"baz"&gt;
                                # =&gt; #&lt;MatchData "foo baz" 1:"baz"&gt;

/^foo (\w+)$/ === 'foo qux'     # =&gt; true
                                # =&gt; #&lt;MatchData "foo qux" 1:"qux"&gt;
</code></pre>

<pre><code class="ruby"># 2.4
/^foo (\w+)$/.match?('foo wow') # =&gt; true
                                # =&gt; nil
</code></pre>

<h2>Regexp#named_captures</h2>

<p>Довольно забавная фича. Позволяет сделать именованные группы в регулярном выражении,
и в последствии преобразовать это все в hash с результатами. Лучше один раз увидеть.</p>

<pre><code class="ruby"># 2.4
pattern = /(?&lt;name1&gt;\w+) (?&lt;name2&gt;\w+)/
pattern.match('Herr Kresken').named_captures # =&gt; { "name1" =&gt; "Herr", "name2" =&gt; "Kresken" }
</code></pre>

<p>Также для похожих целей можно использовать метод <code>values_at</code>, который также теперь можно применять к отматченному результату</p>

<pre><code class="ruby"># 2.4
pattern = /(?&lt;year&gt;\d{4})-(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})/
pattern.match('2016-02-01').values_at(:year, :month) # =&gt; ["2016", "02"]
</code></pre>

<p>Кроме именованных ключей, вы можете передать индексы групп, например 1, 3</p>

<pre><code class="ruby"># 2.4
pattern = /(\d{4})-(\d{2})-(\d{2})$/
pattern.match('2016-07-18').values_at(1, 3) # =&gt; ["2016", "18"]
</code></pre>

<h2>Integer#digits</h2>

<p>Как получить массив чисел составляющих число? Раньше это можно было сделать так
Преобразовать число в строку, вызвать метод <code>chars</code>, через map сделать <code>to_i</code></p>

<pre><code class="ruby">123.to_s.chars.map(&amp;:to_i).reverse # =&gt; [3, 2, 1]
</code></pre>

<p>Теперь стало проще:</p>

<pre><code class="ruby"># 2.4
123.digits                  # =&gt; [3, 2, 1]
</code></pre>

<h2>Array#min, max</h2>

<p>Array класс обзавелся своими методами <code>min, max</code>, который работают практически в 2 раза быстрее чем соответствующие методы
Enumerable</p>

<h2>Обьединение Bignum Fixnum в Integer</h2>

<p>Довольно серьезное изменение структуры языка. В Ruby 2.4 убрали классы Fixnum и Bignum и объединили их в один Integer</p>

<pre><code class="ruby"># 2.3:
numerics # =&gt; [Complex, Rational, Bignum, Float, Fixnum, Integer, BigDecimal]

# 2.4:
numerics # =&gt; [Complex, Rational, Float, Integer, BigDecimal]
</code></pre>

<h2>Использование в условиях мультиприсвоения</h2>

<p>Теперь в условиях можно использовать множественное присвоение</p>

<pre><code class="ruby"># 2.4
branch1 =
  if (foo, bar = %w[foo bar])
    'true'
  else
    'false'
  end

branch2 =
  if (foo, bar = nil)
    'true'
  else
    'false'
  end

branch1 # =&gt; "true"
branch2 # =&gt; "false"
</code></pre>

<h2>Заключение</h2>

<p>Неплохие добавочки в язык, точно знаю что использовал бы <code>transform_values</code>, недавно был случай когда нужно было проверить
папку на наличие в ней файлов, здесь бы пригодился метод <code>empty?</code>. Вижу применение для <code>named_captures</code>. Остальное также может
пригодиться, но лично для меня реже. Помимо добавления функционала были улучшения производительности. Но это уже совсем другая
история. На этом все. Подписывайтесь на <a href="https://www.youtube.com/c/gururubyru">канал</a>, скоро выйдет новая порция уроков. Добавляйте в закладки</p>

<h2>Ссылки к статье</h2>

<ul>
<li><a href="https://www.ruby-lang.org/en/news/2016/09/08/ruby-2-4-0-preview2-released/">Релиз Ruby 2.4</a></li>
<li><a href="https://github.com/pry/pry">Gem <code>pry</code></a></li>
</ul>

]]></content>
  </entry>
  
</feed>
